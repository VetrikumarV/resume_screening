# -*- coding: utf-8 -*-
"""resume_screening_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1riC-c6Dqdb0hXpvZiPcubpT4K0xG5hby
"""

# Resume Screening App using Streamlit and OpenAI


import streamlit as st
import openai
from docx import Document
import os

openai.api_key = "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"  # Paste your key directly, enclosed in quotes

st.set_page_config(page_title="Resume Screening App", layout="wide")
st.title("ü§ñ Resume Screening with GPT")

job_description = st.text_area("Paste the Job Description", height=200)
resume_file = st.file_uploader("Upload a Resume (PDF/DOCX)", type=["pdf", "docx"])

# Helper to extract text from docx

def extract_docx(file):
    doc = Document(file)
    return "\n".join([para.text for para in doc.paragraphs])

# Helper to call OpenAI API
def get_screening_feedback(resume_text, job_description):
    prompt = f"""
    Given the following job description and resume, evaluate the resume:

    Job Description:
    {job_description}

    Resume:
    {resume_text}

    Provide:
    - A brief summary of the resume
    - Match percentage with job description
    - Strengths
    - Weaknesses
    - Suggest improvements
    """

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a professional resume screener."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.5
    )
    return response['choices'][0]['message']['content']

if st.button("Analyze Resume") and resume_file and job_description:
    file_text = ""
    if resume_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        file_text = extract_docx(resume_file)
    else:
        st.error("Only DOCX resumes are supported right now. PDF support coming soon!")

    with st.spinner("Analyzing resume with GPT..."):
        output = get_screening_feedback(file_text, job_description)
        st.markdown("### üìù Screening Results")
        st.write(output)

elif st.button("Analyze Resume"):
    st.warning("Please upload a resume and provide a job description.")

